
<style>
  .test_box {
  font-size:  12px;       /* 文字サイズ指定 */
  margin:  20px;          /* 空白指定 */
  padding-bottom:10px;
}
</style>
<%= link_to t('helpers.link.overview'), tasks_path,method: :get,class: 'btn btn-outline-primary btn-sm'%>
  <div class="test_box font_test"  >
 
<div class="weather">
  <h3 class="weather__title">顧客情報</h3>
  <p class="area">居住地付近 <%=@customer.prefecture%>の天気</p>
  <div id="weather"></div>
</div>

<script type="text/javascript">
$(function () {

  // 緯度経度を取得
  const latlon_url = 'https://api.openweathermap.org/geo/1.0/direct?q=<%= "#{@prefecture}" %>&appid=<%= ENV['OPEN_WEATHER_MAP_API']%>';
  console.log(latlon_url);
  $.ajax({
    url: latlon_url,
    dataType: "json",
    type: 'GET',
  })
  .done(function (latlon) {
    const lat = latlon[0].lat
    const lon = latlon[0].lon

    // 天気予報を取得
    // const weather_url = 'https://api.openweathermap.org/data/2.5/onecall?lat=' + lat + '&lon=' + lon + '&exclude=current,minutely,hourly,alerts&units=metric&appid=<%= ENV['OPEN_WEATHER_MAP_API']%>';
    const weather_url = 'https://api.openweathermap.org/data/2.5/onecall?lat=' + lat + '&lon=' + lon + '&exclude=current,minutely,hourly,alerts&units=metric&appid=<%= ENV['OPEN_WEATHER_MAP_API']%>';
    console.log(weather_url);
    $.ajax({
        url: weather_url,
        dataType: 'json',
        type: 'GET',
      })
      .done(function (weather) {
        let insertHTML = '';

        for (let i = 0; i <= 6; i = i + 1) {
          insertHTML += buildHTML(weather, i);
        }
        $('#weather').html(insertHTML);
      })
      .fail(function (weather) {
        alert('天気予報の取得に失敗しました');
      });
  })
});

// 日本語で表示
function buildHTML(weather, i) {
  //日付、時間を取得（Dateがミリ秒なので1000倍が必要）
  const date = new Date(weather.daily[i].dt * 1000);
  //UTCとの時差を無くす(日本は-9時間のため9を足す)
  date.setHours(date.getHours() + 9);
  //月を取得。getMonth()は0~11を返すため1を足すことによって1月~12月を返すように設定
  const month = date.getMonth() + 1;
  //曜日の日本語化のため、配列を用意する
  const Week = new Array('(土)', '(金)', '(木)', '(水)', '(火)', '(月)', '(日)');
  //月＋日＋曜日をdayに代入。getDay()は0~6を返すためWeek配列内のインデックスに対応した文字列を取得
  const day = month + '/' + date.getDate() + Week[date.getDay()];
  //天気のアイコンを取得
  const icon = weather.daily[i].weather[0].icon;

  const html =
    '<div class="weather__content--report">' + 
      '<img src="https://openweathermap.org/img/w/' + icon + '.png">' +
      '<span class="weather__content--report-date">' + day + "</span>" +
      '<div class="weather__content--report-temp-max">' + '最高：' + Math.round(weather.daily[i].temp.max) + "℃</div>" +
      '<span class="weather__content--report-temp-min">' + '最低：' + Math.floor(weather.daily[i].temp.min) + "℃</span>" +
    '</div>';
  return html
}
</script>
<div class='container'>

    <div class="p-3 mb-2 bg-light text-dark">
    <div class =row>
      <div class="col-2">顧客名 :</div>
      <div class="col-2"><%= @customer.name%></div>
    </div>
    </div>

    <div class="p-3 mb-2 bg-light text-dark">
     <div class =row>
      <div class="col-2">郵便番号 : </div>
      <div class="col-1"> <%= @customer.zip %></div>
    </div>
    <div class =row>
      <div class="col-2"> 都道府県 : </div>
      <div class="col-2"><%= @customer.prefecture %></div>
    </div>
    <div class =row>
      <div class="col-2"> 住所 : </div>
      <div class="col-2"><%= @customer.address %></div>
    </div>
       <div class =row>
      <div class="col-2"> 電話 : </div>
      <div class="col-2"><%= @customer.tel %></div>
    </div>
    </div>
   
    <div class="p-3 mb-2 bg-light text-dark">
      <div class =row>
        <div class="col-2"> 伝票番号: </div>
        <div class="col-10"><%= @customer.task_id %></div>
        <div class="col-2"> 作業予定日: </div>
        <div class="col-10"><%= @task.support_at.strftime("%F").to_s %></div>
      </div>
    </div>
<<<<<<< HEAD
<<<<<<< HEAD
    
 
<<<<<<< HEAD
  <div id="map"></div>
=======
<<<<<<< HEAD
<div id="map"></div>
<<<<<<< HEAD
>>>>>>> f256a0b (herokuでの地図情報表示されない不具合)
=======
=======
    
 
  <div id="map"></div>
>>>>>>> 62c0077 (地図情報編集)
>>>>>>> 58eab6f (地図情報編集)
<script>
  let map;
  function initMap() {
    var lat = parseFloat(document.getElementById('lat'));
    var lng = parseFloat(document.getElementById('lng'));
    // geocoderを初期化
    geocoder = new google.maps.Geocoder()
    map = new google.maps.Map(document.getElementById('map'), {
      // コントローラーで定義した変数から緯度経度を呼び出し、マップの中心に表示
      center: {
        lat: gon.customer.latitude,
        lng: gon.customer.longitude
      },
      // マップの倍率はお好みで
      zoom: 17,
    });
<<<<<<< HEAD
=======
  <div id="map"></div>
<script type="text/javascript">
      function initMap() {
        var test ={lat: <%= @customer.latitude %>, lng: <%= @customer.longitude %>};
        var map = new google.maps.Map(document.getElementById('map'), {
                  zoom: 17, 
                  center: test
                  });
        var transitLayer = new google.maps.TransitLayer();
        transitLayer.setMap(map);
>>>>>>> f9c59a4 (herokuでの地図情報表示されない不具合)

        var contentString = '住所：<%= @customer.address %>';
        var infowindow = new google.maps.InfoWindow({
          content: contentString
        });

        var marker = new google.maps.Marker({
                      position:test,
                      map: map,
                      title: contentString
                    });

        marker.addListener('click', function() {
          infowindow.open(map, marker);
        });
      }
    </script>

    <script async defer
                  src="https://maps.googleapis.com/maps/api/js?v=3.exp&key=<%= ENV['GOOGLE_MAP_API'] %>&callback=initMap">
    </script>

    <style type="text/css">
      #map { height: 600px;
            width: 100%;}
    </style>

    <!--mapの表示-->
    <div id="map" class = "col-lg-6"></div>

=======
>>>>>>> f007332 (地図情報削除)
=======

    marker = new google.maps.Marker({
      // コントローラーで定義した変数から緯度経度を呼び出し、マーカーを立てる
      map,
      draggable: true,
      animation: google.maps.Animation.DROP,
      position: {
        lat: gon.customer.latitude,
        lng: gon.customer.longitude
      },
      map: map
    });
     marker.addListener("click", toggleBounce);
      const trafficLayer = new google.maps.TrafficLayer();
     trafficLayer.setMap(map);
    }
    function toggleBounce() {
     if (marker.getAnimation() !== null) {
      marker.setAnimation(null);
    } else {
    marker.setAnimation(google.maps.Animation.BOUNCE);
    }
    }   
    window.initMap = initMap;
</script>

<script
    src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_MAP_API'] %>&callback=initMap"  
    async defer>
    
</script>
>>>>>>> 62c0077 (地図情報編集)
  </div><!--container-->
  </div><!--font-->
</div>